1. 마음대로 브랜치 만들어서 합치고 막 그런 식으로 작업을 하게 되면 개발 과정이 매우 복잡
2. 누가 뭐 했는지 추적 같은 것도 되게 어렵습니다. 
3. 깃을 이용해서 이제 개발자 여러 명이서 이렇게 작업을 할 때
4. 깃 플로우부터 시작해서 깃 플로우, 트렁크베이스드 등 여러 가지 전략
5. 깃 플로우 전략은 크게 5개의 브랜치 운영
6. 지금부터 이제 던공 앤 파이터 엠이라는 게임 개발 팀장
7. 팀을 리드하는 건 처음이라 주먹구구식으로 이제 0.9 버전까지 코딩
8. 1.0 버전부터는요 인제 신기능도 추가할 게 되게 많고 그래 가지고 좀 제대로 개발을 진행해 보고 싶음
9. 지금까지 짜던 걸 메인 브랜치에 보관0.9버전 코드
10. 신기능을 만들고 싶은데 자 여기다가 직접 이렇게 만들 거예요? 절대 안 되구요. 신입개발자들이 여기다가 무슨 짓을 할지 모르기 때문에 여기다가 직접 이렇게 개발하는 건 좀 위험하구요. 
11. 기존 코드를 이렇게 브랜치로 복제
12. develop 브랜치 - 신기능을 추가할 예정
13. 기존 원본 코드는 안 건드려도 되니까, 안정적으로 개발할 수 있겠죠.
14. 디벨롭 브랜치에다가 직접 막 코드를 푸쉬해버리면 또 같은 참사가 일어날 수 있기 때문에
15. 새로운 아이디어 또는 각자, feature 브랜치 - 개발해 본 다음에 이게 잘 된다. 그러면은 인제 다시 디벨롭에 합치고(merge)
16. 예를 들어 길드 기능이 필요
17. feature/guild 브랜치 만들어서 여기다가 작업한 다음에 코드가 잘 된다. 그러면 이제 디벨롭에 합치고
18. 친구 기능이 필요
19. feature/friends 브랜치 만들어서 여기다가 만들어보고 그 다음에 잘 되면 합치고
20. 코드가 이제 어느 정도 완성
21. 출시하고 싶다 -> 메인 브랜치에 이렇게 바로 합쳐요?
22. 불안하기 때문에 임시 브랜치release – 테스트 or QA 진행
23. 고칠 게 있으면 고치고 완성이 된 것 같다 그러면 main 브랜치에 합치면 됨
24. main – 유저 배포
25. 완성이 돼서 출시를 한다기보다 데드라인이 다 돼 출시하는 경우들이 많지만
26. release 브랜치를 이용하면 출시하기 전에 마지막 테스트
27. develop브랜치도 개발이 진행이 되어야 되기 때문에 release에서 merge
28. 성공적으로 1.0 버전을 출시
29. 유저들이 1.0 버전에서 갑자기 버그를 발견
30. 골드 무한복사 이런 것들이 가능
31. hotfix 브랜치 – 즉시 수정, 긴급 상황
32. 수정 후 main에 merge
33. 합친 내용을 다시 배포
34. 끝!
35. 이걸 적용하면 조금 더 안정적으로 개발과 출시
36. CI/CD에 적합하지 않음
37. 그냥 똑같이 따라할 생각하지 마시구요. 여러분들이 상황에 맞게 변형해서 쓰거나 뭐 그러시면 될 것 같습니다. 
38. 예를 들어 릴리즈 브랜치, 필요 없으면 안 쓰면 됨.
39. 그에 대한 합당한 이유 근거를 댈 수 있음
40. 간단한 전략
41. 예를 들어서 이제 트렁크 베이스드 디벨롭먼트
42. 소스 코드를 쪼개 놓는 게 아니라 그냥 메인 브랜치 하나만 운영
43. 새로운 기능이 필요하다 버그 픽스가 필요하다
44. 그때마다 메인 브랜치에서 hotfix 브랜치 만들어서 코드를 짠 다음 merge
45. 바로바로 배포
46. github flow 전략 비슷
47. 이런 전략들의 장점 - 소스 코드를 여러 개를 관리할 필요가 없는 거예요.
48. 단점 - 많은 테스트가 필요
49. 테스트를 자동화한다든지 배포를 자동화 하는 시스템
50. 프로젝트가 좀 많이 안정화되어 있는 경우 사용. 

